#include <LiquidCrystal_I2C.h>
#include <Servo.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);  // I2C address, columns, rows

const int trigPin1 = 6;
const int echoPin1 = 5;
const int trigPin2 = 4;
const int echoPin2 = 3;
const int greenLedPin = 8;
const int redLedPin = 9;
const int buzzerPin = 12;
const int servoPin = 7;

const int carStationaryThreshold = 165;  // Adjust this value as per your requirements

int totalParkingSpots = 2;
int availableParkingSpots = totalParkingSpots;

bool isCarMoving = false;

Servo servo;

void setup() {
  pinMode(greenLedPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  lcd.begin(16, 2);
  lcd.print("Parking System");
  lcd.setCursor(0, 1);
  lcd.print("Spots: ");

  updateLCD();

  servo.attach(servoPin);  // Attaching the servo to the corresponding pin
}

void loop() {
  int distance1 = getDistance(trigPin1, echoPin1);
  int distance2 = getDistance(trigPin2, echoPin2);

  if (distance1 > carStationaryThreshold && distance2 > carStationaryThreshold) {
    // Parking spots are empty
    digitalWrite(greenLedPin, HIGH);  // Turn on the green LED
    digitalWrite(redLedPin, LOW);     // Turn off the red LED
    availableParkingSpots = totalParkingSpots;
    updateLCD();

    if (isCarMoving) {
      isCarMoving = false;
      deactivateServoMotor();
    }
  } else {
    // At least one parking spot is occupied or car is moving
    digitalWrite(greenLedPin, LOW);   // Turn off the green LED
    digitalWrite(redLedPin, HIGH);    // Turn on the red LED
    availableParkingSpots = totalParkingSpots - 1;
    updateLCD();

    if (!isCarMoving) {
      isCarMoving = true;
      blinkLED();       // Blink the LED to indicate car movement
      activateBuzzer(); // Activate the buzzer to indicate car movement
      deactivateServoMotor();
    }
  }

  delay(500);  // Adjust the delay as per your requirements
}

int getDistance(int trigPin, int echoPin) {
  // Send ultrasonic pulse
  pinMode(trigPin, OUTPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure the echo duration
  pinMode(echoPin, INPUT);
  long duration = pulseIn(echoPin, HIGH);

  // Calculate distance based on the speed of sound
  int distance = duration * 0.034 / 2;  // Distance in centimeters

  return distance;
}

void updateLCD() {
  lcd.setCursor(7, 1);
  lcd.print(availableParkingSpots);
}

void deactivateServoMotor() {
  servo.write(0);  // Set the servo to the off position
}

void blinkLED() {
  digitalWrite(redLedPin, HIGH);   // Turn on the red LED
  delay(500);                      // Delay for 500 milliseconds
  digitalWrite(redLedPin, LOW);    // Turn off the red LED
  delay(500);                      // Delay for 500 milliseconds
}

void activateBuzzer() {
  digitalWrite(buzzerPin, HIGH);   // Turn on the buzzer
  delay(500);                      // Delay for 500 milliseconds
  digitalWrite(buzzerPin, LOW);    // Turn off the buzzer
  delay(500);                      // Delay for 500 milliseconds
}
